https://www.pgexercises.com/questions/basic/

1. Retrieve everything from a table

	SELECT
		*
	FROM 
		cd.facilities

2. Retrieve specific columns from a table

	SELECT 
		name, membercost
	FROM
		cd.facilities

3. Control which rows are retrieved

	SELECT 
		* 
	FROM 
		cd.facilities
	WHERE
		membercost > 0

4. Control which rows are retrieved - part 2

	SELECT
		facid, name, membercost, monthlymaintenance  
	FROM
		cd.facilities 
	WHERE
		membercost < monthlymaintenance / 50 
	AND
		membercost > 0

5. Basic string searches

	SELECT 
		*
	FROM
		cd.facilities
	WHERE 
		name LIKE'%Tennis'
	OR 
		name LIKE'Tennis%'

6. Matching against multiple possible values

	SELECT
		* 
	FROM 
		cd.facilities
	WHERE
		facid in (1,5)

7. Classify results into buckets

	SELECT
		name,
	CASE WHEN 
		(monthlymaintenance > 100) 
	THEN
		'expensive'
	ELSE
		'cheap'
	END as cost
	FROM
		cd.facilities;   

8. Working with dates

	SELECT
		memid, surname, firstname, joindate
	FROM
		cd.members
	WHERE
		joindate >= '2012-09-01'

9. Removing duplicates, and ordering results

	SELECT distinct 
		surname
	FROM 
		cd.members
	order by surname
	FETCH FIRST 10 ROWS ONLY

10. Combining results from multiple queries

	SELECT
		name
	from
		cd.facilities
	union
	select 
		surname
	from
		cd.members

11. Simple aggregation

	SELECT
		joindate
	FROM
		cd.members
	WHERE
		joindate IN (SELECT max(joindate) FROM cd.members);

12. More aggregation

	SELECT 
		firstname, surname, joindate 
	FROM 
		cd.members
	WHERE 
		joindate
 	IN (SELECT max(joindate) FROM cd.members);


https://www.pgexercises.com/questions/joins/

1. Retrieve the start times of members' bookings

	SELECT 
		booking.starttime 
	FROM
		cd.bookings booking
	inner join cd.members members
		on members.memid = booking.memid
	WHERE 
		members.firstname='David' 
		and members.surname='Farrell';  


2. Work out the start times of bookings for tennis courts

	SELECT 
		bookings.starttime as start,
		facilities.name as name
	FROM
		cd.facilities facilities
		inner join cd.bookings bookings
			on facilities.facid = bookings.facid
	WHERE 
		facilities.name in ('Tennis Court 1', 'Tennis Court 2') and
		bookings.starttime >= '2012-09-21' and
		bookings.starttime < '2012-09-22'
	order by bookings.starttime;   

3. Produce a list of all members who have recommended another member

	SELECT distinct
		recs.firstname as firstname,
		rec.surname as surname
	FROM
		cd.members members
		inner join cd.members rec
			on rec.memid = members.recommendedby
	order by surname, firstname; 

4. Produce a list of all members, along with their recommender

	SELECT 
		mems.firstname as memfname,
		mems.surname as memsname,
		recs.firstname as recfname,
		recs.surname as recsname
	FROM
		cd.members mems
		left outer join cd.members recs
			on recs.memid = mems.recommendedby
	order by memsname, memfname;    

5. Produce a list of all members who have used a tennis court

	SELECT distinct
		mems.firstname || ' ' || mems.surname as member, fac.name as facil
	FROM
		cd.members mems
		inner join cd.bookings bookings
			on mems.memid = bookings.memid
		inner join cd.facilities fac
			on bookings.facid = fac.facid
	WHERE
		fac.name in ('Tennis Court 2','Tennis Court 1')
	order by member, facil

6. Produce a list of costly bookings

	select
		mems.firstname || ' ' || mems.surname as member,
		fac.name as name,
	
		case
			when mems.memid = 0 
		then
			booking.slots * fac.guestcost
		else
			booking.slots * fac.membercost
		end as cost
	
	from
		cd.members mems
		inner join cd.bookings booking
			on mems.memid = booking.memid
		inner join cd.facilities fac
			on booking.facid = fac.facid
	where
		booking.starttime >= '2012-09-14' and
		booking.starttime < '2012-09-15' and
		((mems.memid = 0 and booking.slots * fac.guestcost > 30) or
		(mems.memid != 0 and booking.slots * fac.membercost > 30))
	
	order by cost

7. Produce a list of all members, along with their recommender, using no joins.

	select distinct
		firstname || ' ' || surname as member,
		(select 
			rec.firstname || ' ' || rec.surname
		from
			cd.members rec
		where
			rec.memid = mems.recommendedby)
	from
		cd.members mems
	order by member

8. Produce a list of costly bookings, using a subquery

	select
		member, name, cost
	from 
		(select 
  			mems.firstname || ' ' || mems.surname as member,
			fac.name as name,
	
			case
				when mems.memid = 0 
			then
				booking.slots * fac.guestcost
			else
				booking.slots * fac.membercost
			end as cost
	
		from
			cd.members mems
			inner join cd.bookings booking
				on mems.memid = booking.memid
			inner join cd.facilities fac
				on booking.facid = fac.facid
		where
			booking.starttime >= '2012-09-14' and
			booking.starttime < '2012-09-15'
  		) as result
  	where cost > 30
	order by cost

https://www.pgexercises.com/questions/aggregates/ 

1. Count the number of facilities

	select count(*)
	from
		cd.facilities

2. Count the number of expensive facilities

	select count(*)
	from
		cd.facilities
	where
		guestcost > 10

3. Count the number of recommendations each member makes.

	select
		recommendedby,
		count(*) 
			from cd.members
			where recommendedby is not null
			group by recommendedby
	order by recommendedby  

4. List the total slots booked per facility

	select
		facid,
		sum(slots)
	from
		cd.bookings
	group by facid
	order by facid

5. List the total slots booked per facility in a given month

	select
		facid,
		sum(slots) as slots
	from
		cd.bookings
	where
		starttime >= '2012-09-01' and
		starttime < '2012-10-01'
	group by facid
	order by slots

6. List the total slots booked per facility per month

	select
		facid,
		extract(month from starttime) as month,
		sum(slots) as slots
	from
		cd.bookings
	where
		extract(year from starttime) = 2012
	group by facid, month
	order by facid, month

7. Find the count of members who have made at least one booking

	select 
		count(distinct memid)
	from
		cd.bookings	

8. List facilities with more than 1000 slots booked

	select
		facid,
		sum(slots) as slot
	from
		cd.bookings
	group by facid
	having
		sum(slots) > 1000
	order by facid

9. Find the total revenue of each facility

	select 
		fac.name, 
		sum(slots * 
			case
			when
				memid = 0 then fac.guestcost
			else 
				fac.membercost
			end) as revenue
	from
		cd.bookings booking
	inner join cd.facilities fac
		on booking.facid = fac.facid
	group by fac.name
	order by revenue; 

10. Find facilities with a total revenue less than 1000

	select 
		fac.name, 
		sum(slots * 
			case
			when
				memid = 0 then fac.guestcost
			else 
				fac.membercost
			end) as revenue
	from
		cd.bookings booking
	inner join cd.facilities fac
		on booking.facid = fac.facid
	group by fac.name
	having sum(slots * 
			case
			when
				memid = 0 then fac.guestcost
			else 
				fac.membercost
			end) < 1000
		
	order by revenue; 

11. Output the facility id that has the highest number of slots booked

	select
		facid,
		sum(slots)
	from
		cd.bookings
	group by facid
	order by sum(slots) desc
	limit 1

12. List the total slots booked per facility per month, part 2

	select 
		facid,
		extract(month from starttime) as month,
		sum(slots) as slot
	from 
		cd.bookings
	where
		starttime >= '2012-01-01' and 
		starttime < '2013-01-01'
	group by
		rollup(facid, month)
	order by facid, month;  

13. List the total hours booked per named facility

	select
		booking.facid,
		(select
		 	name
		 from 
		 	cd.facilities
		 where
		 	cd.facilities.facid = booking.facid
		limit 1) as name,
		round((sum(slots) / 2), 2) as slots
	from
		cd.bookings booking
	group by facid
	order by facid

14. List each member's first booking after September 1st 2012

	select
		mems.surname,
		mems.firstname,
		mems.memid,
		min(booking.starttime) as starttime
	from
		cd.bookings booking
		inner join cd.members mems
		on mems.memid = booking.memid
	where starttime >= '2012-09-01'
	group by
		mems.surname,
		mems.firstname,
		mems.memid
	order by mems.memid

15. Produce a list of member names, with each row containing the total member count

	select
		count(*) over(),
		firstname,
		surname
	from
		cd.members
	group by
		firstname,
		surname,
		joindate
	order by joindate

16. Produce a numbered list of members

	select
		row_number() over(),
		firstname,
		surname
	from
		cd.members
	order by joindate

17. Output the facility id that has the highest number of slots booked, again

	select
		facid,
		sum(slots)
	from
		cd.bookings
	group by facid
	order by sum(slots) desc
	limit 1

18. Rank members by (rounded) hours used

	select
		firstname,
		surname,
		((sum(booking.slots) + 10) / 20) * 10 as hours,
		rank() over (order by ((sum(booking.slots) + 10) / 20) * 10 desc) as rank

	from
		cd.bookings booking
		inner join cd.members mems
		on booking.memid = mems.memid
	group by mems.memid
	order by rank, surname, firstname;   

19. Find the top three revenue generating facilities

	select
		name,
		rank
	from 
		(select 
	 		fac.name as name,
	 		rank() over (order by sum(case
		when
			memid = 0 then slots * fac.guestcost
			else slots * membercost
			end) desc) as rank
		from 
	 		cd.bookings booking
			inner join cd.facilities fac
			on booking.facid = fac.facid
	group by fac.name) as getRevenue
	order by rank 
	limit 3

20. Classify facilities by value

	select
		name,
	
		case
		when
			classify = 1
		then 'high'
		when
			classify = 2 then 'average'
		else 'low'
		end revenue
	from
		(select
	 		fac.name as name,
	 		ntile(3) over (order by sum(
			case
		  	when memid = 0 
		  	then slots * fac.guestcost
		  	else slots * fac.membercost
		  	end) desc) as classify
	from
	 		cd.bookings booking
			inner join cd.facilities fac
			on booking.facid = fac.facid
			group by fac.name
			) as getClassify
	order by classify, name;   

21. Calculate the payback time for each facility
22. Calculate a rolling average of total revenue
