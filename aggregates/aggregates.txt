https://www.pgexercises.com/questions/aggregates/ 

1. Count the number of facilities

	select count(*)
	from
		cd.facilities

2. Count the number of expensive facilities

	select count(*)
	from
		cd.facilities
	where
		guestcost > 10

3. Count the number of recommendations each member makes.

	select
		recommendedby,
		count(*) 
			from cd.members
			where recommendedby is not null
			group by recommendedby
	order by recommendedby  

4. List the total slots booked per facility

	select
		facid,
		sum(slots)
	from
		cd.bookings
	group by facid
	order by facid

5. List the total slots booked per facility in a given month

	select
		facid,
		sum(slots) as slots
	from
		cd.bookings
	where
		starttime >= '2012-09-01' and
		starttime < '2012-10-01'
	group by facid
	order by slots

6. List the total slots booked per facility per month

	select
		facid,
		extract(month from starttime) as month,
		sum(slots) as slots
	from
		cd.bookings
	where
		extract(year from starttime) = 2012
	group by facid, month
	order by facid, month

7. Find the count of members who have made at least one booking

	select 
		count(distinct memid)
	from
		cd.bookings	

8. List facilities with more than 1000 slots booked

	select
		facid,
		sum(slots) as slot
	from
		cd.bookings
	group by facid
	having
		sum(slots) > 1000
	order by facid

9. Find the total revenue of each facility

	select 
		fac.name, 
		sum(slots * 
			case
			when
				memid = 0 then fac.guestcost
			else 
				fac.membercost
			end) as revenue
	from
		cd.bookings booking
	inner join cd.facilities fac
		on booking.facid = fac.facid
	group by fac.name
	order by revenue; 

10. Find facilities with a total revenue less than 1000

	select 
		fac.name, 
		sum(slots * 
			case
			when
				memid = 0 then fac.guestcost
			else 
				fac.membercost
			end) as revenue
	from
		cd.bookings booking
	inner join cd.facilities fac
		on booking.facid = fac.facid
	group by fac.name
	having sum(slots * 
			case
			when
				memid = 0 then fac.guestcost
			else 
				fac.membercost
			end) < 1000
		
	order by revenue; 

11. Output the facility id that has the highest number of slots booked

	select
		facid,
		sum(slots)
	from
		cd.bookings
	group by facid
	order by sum(slots) desc
	limit 1

12. List the total slots booked per facility per month, part 2

	select 
		facid,
		extract(month from starttime) as month,
		sum(slots) as slot
	from 
		cd.bookings
	where
		starttime >= '2012-01-01' and 
		starttime < '2013-01-01'
	group by
		rollup(facid, month)
	order by facid, month;  

13. List the total hours booked per named facility

	select
		booking.facid,
		(select
		 	name
		 from 
		 	cd.facilities
		 where
		 	cd.facilities.facid = booking.facid
		limit 1) as name,
		round((sum(slots) / 2), 2) as slots
	from
		cd.bookings booking
	group by facid
	order by facid

14. List each member's first booking after September 1st 2012

	select
		mems.surname,
		mems.firstname,
		mems.memid,
		min(booking.starttime) as starttime
	from
		cd.bookings booking
		inner join cd.members mems
		on mems.memid = booking.memid
	where starttime >= '2012-09-01'
	group by
		mems.surname,
		mems.firstname,
		mems.memid
	order by mems.memid

15. Produce a list of member names, with each row containing the total member count

	select
		count(*) over(),
		firstname,
		surname
	from
		cd.members
	group by
		firstname,
		surname,
		joindate
	order by joindate

16. Produce a numbered list of members

	select
		row_number() over(),
		firstname,
		surname
	from
		cd.members
	order by joindate

17. Output the facility id that has the highest number of slots booked, again

	select
		facid,
		sum(slots)
	from
		cd.bookings
	group by facid
	order by sum(slots) desc
	limit 1

18. Rank members by (rounded) hours used

	select
		firstname,
		surname,
		((sum(booking.slots) + 10) / 20) * 10 as hours,
		rank() over (order by ((sum(booking.slots) + 10) / 20) * 10 desc) as rank

	from
		cd.bookings booking
		inner join cd.members mems
		on booking.memid = mems.memid
	group by mems.memid
	order by rank, surname, firstname;   

19. Find the top three revenue generating facilities

	select
		name,
		rank
	from 
		(select 
	 		fac.name as name,
	 		rank() over (order by sum(case
		when
			memid = 0 then slots * fac.guestcost
			else slots * membercost
			end) desc) as rank
		from 
	 		cd.bookings booking
			inner join cd.facilities fac
			on booking.facid = fac.facid
	group by fac.name) as getRevenue
	order by rank 
	limit 3

20. Classify facilities by value

	select
		name,
	
		case
		when
			classify = 1
		then 'high'
		when
			classify = 2 then 'average'
		else 'low'
		end revenue
	from
		(select
	 		fac.name as name,
	 		ntile(3) over (order by sum(
			case
		  	when memid = 0 
		  	then slots * fac.guestcost
		  	else slots * fac.membercost
		  	end) desc) as classify
	from
	 		cd.bookings booking
			inner join cd.facilities fac
			on booking.facid = fac.facid
			group by fac.name
			) as getClassify
	order by classify, name   

21. Calculate the payback time for each facility

	select 	name, 
		initialoutlay / (monthlyrevenue - monthlymaintenance) as rtime 
		from 
			(select
		 		fac.name as name, 
				fac.initialoutlay as initialoutlay,
				fac.monthlymaintenance as monthlymaintenance,
				sum(case
					when memid = 0
					then slots * fac.guestcost
					else slots * fac.membercost
					end) / 3 as monthlyrevenue
			from
		 		cd.bookings booking
				inner join cd.facilities fac
					on booking.facid = fac.facid
			group by fac.facid
			) as getRepaytime
	order by name 

22. Calculate a rolling average of total revenue

	select
		datacreator.date,
		(select sum(case
				when memid = 0
				then slots * fac.guestcost
				else slots * fac.membercost
				end) as rev
	
		from cd.bookings booking
			inner join cd.facilities fac
				on booking.facid = fac.facid
			where booking.starttime > datacreator.date - interval '14 days'
				and booking.starttime < datacreator.date + interval '1 day') / 15 as revenue
		from
			(select 
	 			cast(generate_series(timestamp '2012-08-01',
							'2012-08-31','1 day') as date) as date) as datacreator
	order by datacreator.date;
